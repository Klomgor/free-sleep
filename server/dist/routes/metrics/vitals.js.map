{"version":3,"file":"vitals.js","sources":["routes/metrics/vitals.ts"],"sourceRoot":"/","sourcesContent":["import express, { Request, Response } from 'express';\nimport { Prisma, vitals as VitalRecord } from '@prisma/client';\nimport moment from 'moment-timezone';\nimport settingsDB from '../../db/settings.js';\nimport { loadVitals } from '../../db/loadVitals.js';\nimport { prisma } from '../../db/prisma.js';\n\n\nconst router = express.Router();\n\n// Define query params\ninterface VitalsQuery {\n  side?: string;\n  startTime?: string;\n  endTime?: string;\n}\n\n\nrouter.get('/vitals', async (req: Request<object, object, object, VitalsQuery>, res: Response) => {\n  const { side, startTime, endTime } = req.query;\n  const query: Prisma.vitalsWhereInput = {};\n\n  if (side) query.side = side;\n\n  query.timestamp = {};\n  if (startTime) query.timestamp.gte = moment(startTime).unix();\n  if (endTime) query.timestamp.lte = moment(endTime).unix();\n\n\n  // Use Prisma's generated type for the records\n  const vitals: VitalRecord[] = await prisma.vitals.findMany({\n    where: query,\n    orderBy: { timestamp: 'asc' },\n  });\n\n  await settingsDB.read();\n\n  const formattedVitals = await loadVitals(vitals);\n\n  res.json(formattedVitals);\n});\n\n\nrouter.get('/vitals/summary', async (req: Request<object, object, object, VitalsQuery>, res: Response) => {\n  const { side, startTime, endTime } = req.query;\n\n  const query: Prisma.vitalsWhereInput = {};\n\n  if (side) query.side = side;\n\n  query.timestamp = {};\n  if (startTime) query.timestamp.gte = moment(startTime).unix();\n  if (endTime) query.timestamp.lte = moment(endTime).unix();\n\n  // Query: Min & Max Heart Rate\n  const heartRateSummary = await prisma.vitals.aggregate({\n    where: query,\n    _min: { heart_rate: true },\n    _max: { heart_rate: true },\n    _avg: { heart_rate: true },\n  });\n\n  // Query: Average Breathing Rate (excluding 0)\n  const avgBreathingRate = await prisma.vitals.aggregate({\n    where: {\n      ...query,\n      breathing_rate: { not: 0, lte: 20, gte: 5 }, // Exclude zero values\n    },\n    _avg: { breathing_rate: true },\n  });\n\n  // Query: Average HRV (excluding 0)\n  const avgHRV = await prisma.vitals.aggregate({\n    where: {\n      ...query,\n      hrv: { not: 0, lte: 120, gte: 30 }, // Exclude zero values\n    },\n    _avg: { hrv: true },\n  });\n\n  res.json({\n    avgHeartRate: Math.round(heartRateSummary._avg.heart_rate || 0),\n    minHeartRate: Math.round(heartRateSummary._min.heart_rate || 0),\n    maxHeartRate: Math.round(heartRateSummary._max.heart_rate || 0),\n    avgHRV: Math.round(avgHRV._avg.hrv || 0),\n    avgBreathingRate: Math.round(avgBreathingRate._avg.breathing_rate || 0),\n  });\n});\n\n\nexport default router;\n"],"names":[],"mappings":"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","debug_id":"7ff9ac2e-1060-508f-8dd4-ed27f17b6fdc"}