{"version":3,"file":"sleep.js","sources":["routes/metrics/sleep.ts"],"sourceRoot":"/","sourcesContent":["import express, { Request, Response } from 'express';\nimport { Prisma } from '@prisma/client';\nimport moment from 'moment-timezone';\nimport { sleepRecordSchema, SleepRecord } from '../../db/sleepRecordsSchema.js';\nimport { loadSleepRecords } from '../../db/loadSleepRecords.js';\nimport { prisma } from '../../db/prisma.js';\n\nconst router = express.Router();\n\n// Define query params\ninterface SleepQuery {\n  side?: string;\n  startTime?: string;\n  endTime?: string;\n}\n\n\nrouter.get('/sleep', async (req: Request<object, object, object, SleepQuery>, res: Response) => {\n  const { startTime, endTime, side } = req.query;\n  const query: Prisma.sleep_recordsWhereInput = {\n    entered_bed_at: {},\n    left_bed_at: {},\n  };\n\n  if (side) query.side = side;\n  if (startTime) {\n    query.left_bed_at = {\n      gte: moment(startTime).unix(),\n    };\n  }\n  if (endTime) {\n    query.entered_bed_at = {\n      lte: moment(endTime).unix(),\n    };\n  }\n\n  const sleepRecords = await prisma.sleep_records.findMany({\n    where: query,\n    orderBy: { entered_bed_at: 'asc' },\n  });\n\n  const formattedRecords = await loadSleepRecords(sleepRecords);\n  res.json(formattedRecords);\n\n});\n\n\nrouter.put<\n  { id: string },\n  any,\n  SleepRecord\n  // @ts-ignore\n>('/sleep/:id', async (req, res) => {\n  const { id } = req.params;\n  const parsedId = parseInt(id, 10);\n  if (isNaN(parsedId)) {\n    return res.status(400).json({ error: 'Invalid ID' });\n  }\n\n  // Fetch the existing record\n  let existingRecord = await prisma.sleep_records.findUnique({\n    where: { id: parsedId },\n  });\n  if (!existingRecord) {\n    return res.status(404).json({ error: 'Sleep record not found' });\n  }\n  const loadedRecords = await loadSleepRecords([existingRecord]);\n  // @ts-ignore\n  existingRecord = loadedRecords[0];\n\n  // Validate the request body\n  const parsedData = sleepRecordSchema.partial().safeParse(req.body);\n  if (!parsedData.success) {\n    return res.status(400).json({ error: 'Invalid request body', details: parsedData.error.format() });\n  }\n  // Convert entered_bed_at and exited_bed_at to epoch timestamps\n  const updatedRecord = { ...parsedData.data };\n  if (updatedRecord.entered_bed_at) {\n    // @ts-ignore\n    updatedRecord.entered_bed_at = Math.floor(new Date(updatedRecord.entered_bed_at).getTime() / 1000);\n  }\n  if (updatedRecord.left_bed_at) {\n    // @ts-ignore\n    updatedRecord.left_bed_at = Math.floor(new Date(updatedRecord.left_bed_at).getTime() / 1000);\n  }\n\n  // Need to recalculate the number of times someone left the bed during the new sleep interval\n  // @ts-ignore\n  if (updatedRecord.entered_bed_at && updatedRecord.left_bed_at) {\n    // @ts-ignore\n    updatedRecord.sleep_period_seconds = updatedRecord.left_bed_at - updatedRecord.entered_bed_at;\n\n    // @ts-ignore\n    updatedRecord.times_exited_bed = existingRecord.not_present_intervals.filter(([start, end]) => {\n      const startTime = Math.floor(new Date(start).getTime() / 1000);\n      const endTime = Math.floor(new Date(end).getTime() / 1000);\n      // @ts-ignore\n      return startTime >= updatedRecord.entered_bed_at && endTime <= updatedRecord.left_bed_at;\n    }).length;\n  }\n\n  // Update the record in the database\n  const dbUpdatedRecord = await prisma.sleep_records.update({\n    where: { id: parsedId },\n    // @ts-ignore\n    data: updatedRecord,\n  });\n\n  // Load and return the updated record\n  const loadedNewRecord = await loadSleepRecords([dbUpdatedRecord]);\n  return res.json(loadedNewRecord[0]);\n});\n\n\nrouter.delete('/sleep/:id', async (req, res) => {\n  const { id } = req.params;\n  await prisma.sleep_records.delete({ where: { id: parseInt(id, 10) } });\n  res.status(204).send();\n});\n\n\nexport default router;\n"],"names":[],"mappings":"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","debug_id":"60b8a776-1cd0-5c68-8791-11908de8441c"}