{"version":3,"file":"frankenServer.js","sources":["8sleep/frankenServer.ts"],"sourceRoot":"/","sourcesContent":["import { Socket } from 'net';\n\nimport { SequentialQueue } from './sequentialQueue.js';\nimport { MessageStream } from './messageStream.js';\nimport { PromiseStream, PromiseStreams, PromiseWriteStream } from './promiseStream.js';\nimport { FrankenCommand, frankenCommands } from './deviceApi.js';\n\nimport { UnixSocketServer } from './unixSocketServer.js';\nimport logger from '../logger.js';\nimport { DeviceStatus } from '../routes/deviceStatus/deviceStatusSchema.js';\nimport { loadDeviceStatus } from './loadDeviceStatus.js';\nimport { wait } from './promises.js';\n\nimport config from '../config.js';\n\nexport class Franken {\n  public constructor(\n    private readonly writeStream: PromiseWriteStream<Buffer>,\n    private readonly messageStream: MessageStream,\n    private readonly sequentialQueue: SequentialQueue,\n    private readonly socket: Socket,\n  ) {\n  }\n\n  static readonly separator = Buffer.from('\\n\\n');\n\n  public async sendMessage(message: string) {\n    logger.debug(`Sending message to sock | message: ${message}`);\n    const responseBytes = await this.sequentialQueue.exec(async () => {\n      const requestBytes = Buffer.concat([Buffer.from(message), Franken.separator]);\n      await this.writeStream.write(requestBytes);\n      const resp = await this.messageStream.readMessage();\n\n      await wait(50);\n      return resp;\n    });\n    const response = responseBytes.toString();\n    logger.debug(`Message sent successfully to sock | message: ${message}`);\n\n    return response;\n  }\n\n  private tryStripNewlines(arg: string) {\n    const containsNewline = arg.indexOf('\\n') >= 0;\n    if (!containsNewline) return arg;\n    return arg.replace(/\\n/gm, '');\n  }\n\n  public async callFunction(command: FrankenCommand, arg: string) {\n    logger.debug(`Calling function | command: ${command} | arg: ${arg}`);\n    const commandNumber = frankenCommands[command];\n    const cleanedArg = this.tryStripNewlines(arg);\n    logger.debug(`commandNumber: ${commandNumber}`);\n    logger.debug(`cleanedArg: ${cleanedArg}`);\n    await this.sendMessage(`${commandNumber}\\n${cleanedArg}`);\n  }\n\n  public async getDeviceStatus(): Promise<DeviceStatus> {\n    const command: FrankenCommand = 'DEVICE_STATUS';\n    const commandNumber = frankenCommands[command];\n    const response = await this.sendMessage(commandNumber);\n    return await loadDeviceStatus(response);\n  }\n\n  public close() {\n    const socket = this.socket;\n    if (!socket.destroyed) socket.destroy();\n  }\n\n  public static fromSocket(socket: Socket) {\n    // @ts-expect-error - Mismatched types\n    const stream: PromiseStream<any> = PromiseStreams.toPromise(socket);\n    const messageStream = new MessageStream(stream, Franken.separator);\n    return new Franken(stream, messageStream, new SequentialQueue(), socket);\n  }\n}\n\nclass FrankenServer {\n  public constructor(private readonly server: UnixSocketServer) {\n  }\n\n  public async close() {\n    logger.debug('Closing FrankenServer socket...');\n    await this.server.close();\n  }\n\n  public async waitForFranken(): Promise<Franken> {\n    const socket = await this.server.waitForConnection();\n    logger.debug('FrankenServer connected');\n    return Franken.fromSocket(socket);\n  }\n\n  public static async start(path: string) {\n    logger.debug(`Creating franken server on socket: ${config.dacSockPath}`);\n    const unixSocketServer = await UnixSocketServer.start(path);\n    return new FrankenServer(unixSocketServer);\n  }\n}\n\nlet frankenServer: FrankenServer | undefined;\n\nexport async function getFrankenServer(): Promise<FrankenServer> {\n  // If we've already started it, reuse:\n  if (frankenServer) return frankenServer;\n  // Otherwise, start a new instance once:\n  frankenServer = await FrankenServer.start(config.dacSockPath);\n  logger.debug('FrankenServer started');\n  return frankenServer;\n}\n\nlet franken: Franken | undefined;\n\nexport async function getFranken(): Promise<Franken> {\n  if (franken) return franken;\n  const frankenServer = await getFrankenServer();\n  franken = await frankenServer.waitForFranken();\n  return franken;\n}\n"],"names":[],"mappings":"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","debug_id":"faaadabd-414e-5e6e-bf26-0935f0d0157b"}