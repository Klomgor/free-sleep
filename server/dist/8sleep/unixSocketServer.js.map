{"version":3,"file":"unixSocketServer.js","sources":["8sleep/unixSocketServer.ts"],"sourceRoot":"/","sourcesContent":["import { createServer, Server, Socket } from 'net';\nimport { unlink as unlinkCb } from 'fs';\nimport logger from '../logger.js';\nimport { toPromise } from './promises.js';\n\n\nasync function unlink(path: string) {\n  // @ts-ignore\n  await toPromise((cb) => unlinkCb(path, cb));\n}\n\n\nexport class UnixSocketServer {\n  private lastConnection: Socket | undefined;\n  private resolveWaiting: ((socket: Socket) => void) | undefined;\n\n  public constructor(private readonly server: Server) {\n    this.server.on('connection', this.onConnection.bind(this));\n  }\n\n  private cleanupExistingConnection() {\n    const existingConnection = this.lastConnection;\n    if (existingConnection !== undefined) {\n      this.lastConnection = undefined;\n      existingConnection.destroy();\n    }\n  }\n\n  private onConnection(socket: Socket) {\n    this.cleanupExistingConnection();\n\n    if (this.resolveWaiting !== undefined) {\n      logger.debug('Resolving connection waiting promise');\n\n      const resolveWaiting = this.resolveWaiting;\n      this.resolveWaiting = undefined;\n      resolveWaiting(socket);\n    } else {\n      this.lastConnection = socket;\n    }\n  }\n\n  public async close() {\n    // @ts-ignore\n    await toPromise((cb) => this.server.close(cb));\n  }\n\n  public waitForConnection() {\n    if (this.lastConnection !== undefined) {\n      logger.debug('Returning existing connection');\n      const connection = this.lastConnection;\n      this.lastConnection = undefined;\n\n      return Promise.resolve(connection);\n    }\n\n    logger.debug('Waiting for future connection');\n    return new Promise<Socket>(resolve => this.resolveWaiting = resolve);\n  }\n\n  public static async start(path: string) {\n    logger.debug('Creating socket connection...');\n    await UnixSocketServer.tryCleanup(path);\n    const unixSocketServer = createServer();\n    unixSocketServer.on('error', (error) => logger.error({ error: error, message: 'Unix socket server error' }));\n\n    await new Promise<void>((resolve) => unixSocketServer.listen(path, resolve));\n\n    const socket = new UnixSocketServer(unixSocketServer);\n    logger.debug('Created socket connection!');\n    return socket;\n  }\n\n  private static async tryCleanup(path: string) {\n    try {\n      await unlink(path);\n    } catch (err) {\n      // ignore if the path doesn't exist\n      if ((err as any)?.code === 'ENOENT') return;\n      throw err;\n    }\n  }\n}\n"],"names":[],"mappings":"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","debug_id":"3d2049cb-3433-53a8-bcb0-d63323ffab3c"}