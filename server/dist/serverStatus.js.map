{"version":3,"file":"serverStatus.js","sources":["serverStatus.ts"],"sourceRoot":"/","sourcesContent":["import { ServerStatus as ServerStatusType } from './routes/serverStatus/serverStatusSchema.js';\nimport { isSystemDateValid } from './jobs/isSystemDateValid.js';\nimport servicesDB from './db/services.js';\nimport { prisma } from './db/prisma.js';\nimport moment from 'moment-timezone';\n\nawait servicesDB.read();\n\nclass ServerStatus {\n  // eslint-disable-next-line no-use-before-define\n  private static instance: ServerStatus;\n\n  public status: ServerStatusType;\n\n  private constructor() {\n    this.status = {\n      alarmSchedule: {\n        name: 'Alarm schedule',\n        status: 'not_started',\n        description: '',\n        message: '',\n      },\n      database: {\n        name: 'Database',\n        status: 'not_started',\n        description: 'Connection to SQLite DB',\n        message: '',\n      },\n      express: {\n        name: 'Express',\n        status: 'not_started',\n        description: 'The back-end server',\n        message: '',\n      },\n      franken: {\n        name: 'Franken sock',\n        status: 'not_started',\n        description: 'Socket service for controlling the hardware',\n        message: '',\n      },\n      jobs: {\n        name: 'Job scheduler',\n        status: 'not_started',\n        description: 'Scheduling service for temperature changes, alarms, and maintenance',\n        message: '',\n      },\n      logger: {\n        name: 'Logger',\n        status: 'not_started',\n        description: 'Logging service',\n        message: '',\n      },\n      powerSchedule: {\n        name: 'Power schedule',\n        status: 'not_started',\n        description: 'Power on/off schedule',\n        message: '',\n      },\n      primeSchedule: {\n        name: 'Prime schedule',\n        status: 'not_started',\n        description: 'Daily prime job',\n        message: '',\n      },\n      rebootSchedule: {\n        name: 'Reboot schedule',\n        status: 'not_started',\n        description: 'Daily system reboots',\n        message: '',\n      },\n      systemDate: {\n        name: 'System date',\n        status: 'not_started',\n        description: 'Whether or not the system date is correct. Scheduling jobs depend on this.',\n        message: '',\n      },\n      temperatureSchedule: {\n        name: 'Temperature schedule',\n        status: 'not_started',\n        description: 'Temperature adjustment schedule',\n        message: '',\n      },\n    };\n  }\n\n  public static getInstance(): ServerStatus {\n    if (!ServerStatus.instance) {\n      ServerStatus.instance = new ServerStatus();\n    }\n    return ServerStatus.instance;\n  }\n\n  async updateDB() {\n    try {\n      await prisma.$queryRaw`SELECT 1`;\n      const quick = await prisma.$queryRawUnsafe<\n        Array<{ quick_check: string }>\n      >(`PRAGMA quick_check;`);\n      const quickCheckHealthy = quick?.[0] && Object.values(quick[0])[0] === 'ok';\n      if (quickCheckHealthy) {\n        this.status.database.status = 'healthy';\n        this.status.database.message = '';\n      } else {\n        this.status.database.status = 'failed';\n        this.status.database.message = `SQLite DB is unhealthy! - ${JSON.stringify(quick)}`;\n      }\n    } catch (error) {\n      this.status.database.status = 'failed';\n      const message = error instanceof Error ? error.message : String(error);\n      this.status.database.message = message;\n    }\n  }\n\n  updateSystemDate() {\n    const isValid = isSystemDateValid();\n    if (isValid) {\n      this.status.systemDate.status = 'healthy';\n      this.status.systemDate.message = '';\n    } else {\n      this.status.systemDate.status = 'failed';\n      this.status.systemDate.message = `Invalid system date: ${new Date().toISOString()}`;\n    }\n  }\n\n  async updateServices() {\n    await servicesDB.read();\n    this.status.biometricsInstallation = servicesDB.data.biometrics.jobs.installation;\n    if (servicesDB.data.biometrics.enabled) {\n      this.status.analyzeSleepLeft = servicesDB.data.biometrics.jobs.analyzeSleepLeft;\n      this.status.analyzeSleepRight = servicesDB.data.biometrics.jobs.analyzeSleepRight;\n      this.status.biometricsCalibrationLeft = servicesDB.data.biometrics.jobs.calibrateLeft;\n      this.status.biometricsCalibrationRight = servicesDB.data.biometrics.jobs.calibrateRight;\n\n      const time = moment(servicesDB.data.biometrics.jobs.stream.timestamp);\n      if (moment().diff(time, 'minutes') >= 5) {\n        servicesDB.data.biometrics.jobs.stream.status = 'failed';\n        servicesDB.data.biometrics.jobs.stream.message = 'Biometrics stream died! Run `systemctl restart free-sleep-stream`';\n      }\n      await servicesDB.write();\n      this.status.biometricsStream = servicesDB.data.biometrics.jobs.stream;\n    } else {\n      // Delete keys from server status\n      delete this.status.analyzeSleepLeft;\n      delete this.status.analyzeSleepRight;\n      delete this.status.biometricsCalibrationLeft;\n      delete this.status.biometricsCalibrationRight;\n      delete this.status.biometricsStream;\n    }\n  }\n\n  async toJSON(): Promise<ServerStatusType> {\n    await this.updateDB();\n    await this.updateServices();\n    this.updateSystemDate();\n    return this.status;\n  }\n}\n\nexport default ServerStatus.getInstance();\n"],"names":[],"mappings":"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","debug_id":"85f063f5-0a87-530f-9bfb-a177bdb60a87"}